//included libraries
#include <Encoder.h>
#include <Wire.h>

//change given angle and distance
double target_d = 5;
double target_a = 0;

//current angle and position
double current_d = 0;
double current_a = 0;

//variables for controller
double kp = 0;
double ki = 0;
double e = 0;
double ts = 0;
double tc = 0;

//variables for motor 1 and encoder
const int input_A1 = 3;
const int input_B1 = 6;
const int M1_dir = 7;
const int M1_speed = 9;
const int M1_enable = 4;
const int M1_count = 0;
int M1_zero = 0;
Encoder wheel1(input_A1, input_B1);

//variables for calculation with motor 1
double count1 = 0;
int dir1 = 0;
int pwm1 = 200;
double theta1 = 0;
double thetaprev1 = 0;
double velo1 = 0;



//variables for motor 2 and encoder
const int input_A2 = 2;
const int input_B2 = 5;
const int M2_dir = 8;
const int M2_speed = 10;
const int M2_enable = 11;
const int M2_count = 0;
int M2_zero = 0;
Encoder wheel2(input_A2, input_B2);

//variables for calculation with motor 2
double count2 = 0;
int pwm2 = 255;
int dir2 = 0;
double velo2 = 0;
double theta2 = 0;
double thetaprev2 = 0;


//pin assignments for camera and pi
const int camera = 12;
const int topi = 13;

//variables for calculations
double currentTime = 0;
double timePrev = 0;
double fullroto = 3200;



void setup() {
  //configuring pins for motors and encoders
  pinMode(M1_speed, OUTPUT);
  pinMode(M1_dir, OUTPUT);
  pinMode(M1_enable, OUTPUT);
  digitalWrite(M1_enable, HIGH);

  pinMode(M2_speed, OUTPUT);
  pinMode(M2_dir, OUTPUT);
  pinMode(M2_enable, OUTPUT);
  digitalWrite(M2_enable, HIGH);

  //configuring pins to communicate to camera and pi
  pinMode(topi, OUTPUT);
  pinMode(camera, INPUT);
  M1_zero = wheel1.read();
  M2_zero = wheel2.read();

  //zero values at start
  current_d = 0;
  current_a = 0;
  M1_zero = wheel1.read();
  M2_zero = wheel2.read();

  Serial.begin(31250);
}

void loop() {
  currentTime = millis();
  count1 = wheel1.read();
  count2 = wheel2.read();

  theta1 = (count1 / fullroto) * 2 * PI;
  theta2 = (count2 / fullroto) * 2 * PI * -1;

  velo1 = (theta1 - thetaprev1) / ((currentTime - timePrev) / 1000);
  velo2 = (theta2 - thetaprev2) / ((currentTime - timePrev) / 1000);
  
  if (currentTime >= 1000 && currentTime <= 2500) {
    analogWrite(M1_speed, pwm1);
    digitalWrite(M1_dir, dir1);
    analogWrite(M2_speed, pwm1);
    digitalWrite(M2_dir, dir2);

    Serial.print(pwm1);
    Serial.print("\t");
    Serial.print(theta1);
    Serial.print("\t");
    Serial.print(velo1);
    Serial.print("\t");
    Serial.print(currentTime);

    Serial.print("\t");
    Serial.print("\t");

    Serial.print(pwm1);
    Serial.print("\t");
    Serial.print(theta2);
    Serial.print("\t");
    Serial.print(velo2);
    Serial.print("\t");
    Serial.print(currentTime);
    Serial.print("\n");
  }

  timePrev = currentTime;
  thetaprev1 = theta1;
  thetaprev2 = theta2;
}

// 200	0.00	0.00	1000.00		200	0.00	0.00	1000.00
// 200	0.00	0.00	1002.00		200	0.00	0.00	1002.00
// 200	0.00	0.65	1008.00		200	0.00	0.33	1008.00
// 200	0.04	2.52	1022.00		200	0.03	2.10	1022.00
// 200	0.09	3.53	1037.00		200	0.08	3.14	1037.00
// 200	0.16	4.49	1051.00		200	0.14	4.07	1051.00
// 200	0.22	4.77	1065.00		200	0.20	4.35	1065.00
// 200	0.30	4.97	1080.00		200	0.27	4.58	1080.00
// 200	0.36	4.77	1094.00		200	0.33	4.91	1094.00
// 200	0.45	5.89	1108.00		200	0.41	5.33	1108.00
// 200	0.53	5.37	1123.00		200	0.48	4.97	1123.00
// 200	0.61	6.31	1137.00		200	0.56	5.75	1137.00
// 200	0.70	5.89	1152.00		200	0.65	5.76	1152.00
// 200	0.80	6.73	1166.00		200	0.74	6.45	1166.00
// 200	0.89	6.73	1180.00		200	0.83	6.45	1180.00
// 200	0.99	6.54	1195.00		200	0.93	6.54	1195.00
// 200	1.09	6.81	1210.00		200	1.03	6.81	1210.00
// 200	1.20	7.57	1224.00		200	1.14	7.57	1224.00
// 200	1.31	7.46	1239.00		200	1.25	7.33	1239.00
// 200	1.43	8.27	1253.00		200	1.36	8.27	1253.00
// 200	1.54	8.41	1267.00		200	1.48	8.56	1267.00
// 200	1.67	8.12	1282.00		200	1.60	8.12	1282.00
// 200	1.79	8.84	1296.00		200	1.73	8.98	1296.00
// 200	1.92	9.12	1310.00		200	1.86	8.98	1310.00
// 200	2.04	8.38	1325.00		200	1.98	8.38	1325.00
// 200	2.17	9.26	1339.00		200	2.11	9.26	1339.00
// 200	2.31	9.54	1353.00		200	2.24	9.40	1353.00
// 200	2.44	9.16	1368.00		200	2.38	9.03	1368.00
// 200	2.58	10.10	1382.00		200	2.52	9.82	1382.00
// 200	2.73	9.69	1397.00		200	2.66	9.56	1397.00
// 200	2.87	9.29	1412.00		200	2.80	9.29	1412.00
// 200	3.01	10.10	1426.00		200	2.94	9.96	1426.00
// 200	3.16	10.38	1440.00		200	3.08	10.24	1440.00
// 200	3.31	9.45	1456.00		200	3.23	9.33	1456.00
// 200	3.45	10.24	1470.00		200	3.37	10.24	1470.00
// 200	3.60	10.34	1485.00		200	3.52	9.95	1485.00
// 200	3.76	10.21	1500.00		200	3.67	9.69	1500.00
// 200	3.91	10.94	1514.00		200	3.82	10.66	1514.00
// 200	4.06	10.21	1529.00		200	3.97	10.47	1529.00
// 200	4.22	9.69	1545.00		200	4.13	9.69	1545.00
// 200	4.37	10.52	1559.00		200	4.28	10.66	1559.00
// 200	4.52	11.08	1573.00		200	4.43	10.94	1573.00
// 200	4.68	9.69	1589.00		200	4.59	9.69	1589.00
// 200	4.82	10.52	1603.00		200	4.74	10.66	1603.00
// 200	4.98	10.34	1618.00		200	4.89	10.60	1618.00
// 200	5.13	9.69	1634.00		200	5.05	9.94	1634.00
// 200	5.28	10.66	1648.00		200	5.21	11.08	1648.00
// 200	5.44	11.36	1662.00		200	5.37	11.50	1662.00
// 200	5.60	9.82	1678.00		200	5.53	9.82	1678.00
// 200	5.75	10.94	1692.00		200	5.68	10.80	1692.00
// 200	5.91	10.06	1708.00		200	5.84	9.94	1708.00
// 200	6.07	11.22	1722.00		200	6.00	11.36	1722.00
// 200	6.23	10.60	1737.00		200	6.16	10.86	1737.00
// 200	6.39	9.82	1753.00		200	6.32	10.19	1753.00
// 200	6.54	11.22	1767.00		200	6.48	11.50	1767.00
// 200	6.70	10.60	1782.00		200	6.65	11.00	1782.00
// 200	6.86	10.47	1797.00		200	6.81	11.00	1797.00
// 200	7.02	10.60	1812.00		200	6.98	11.13	1812.00
// 200	7.18	10.73	1827.00		200	7.15	11.00	1827.00
// 200	7.34	10.73	1842.00		200	7.31	10.86	1842.00
// 200	7.50	10.60	1857.00		200	7.47	10.60	1857.00
// 200	7.66	10.47	1872.00		200	7.63	10.60	1872.00
// 200	7.82	10.73	1887.00		200	7.79	10.73	1887.00
// 200	7.98	10.73	1902.00		200	7.95	10.86	1902.00
// 200	8.14	10.73	1917.00		200	8.12	11.00	1917.00
// 200	8.30	10.73	1932.00		200	8.28	11.00	1932.00
// 200	8.46	10.73	1947.00		200	8.44	10.73	1947.00
// 200	8.63	10.19	1963.00		200	8.60	10.06	1963.00
// 200	8.79	10.86	1978.00		200	8.76	10.73	1978.00
// 200	8.95	11.50	1992.00		200	8.92	11.50	1992.00
// 200	9.11	10.06	2008.00		200	9.08	9.82	2008.00
// 200	9.27	11.36	2022.00		200	9.24	11.08	2022.00
// 200	9.43	10.60	2037.00		200	9.40	10.73	2037.00
// 200	9.59	10.06	2053.00		200	9.56	9.94	2053.00
// 200	9.74	11.08	2067.00		200	9.71	10.94	2067.00
// 200	9.91	10.86	2082.00		200	9.87	10.60	2082.00
// 200	10.07	10.73	2097.00		200	10.03	10.73	2097.00
// 200	10.24	10.55	2113.00		200	10.20	10.55	2113.00
// 200	10.41	11.39	2128.00		200	10.37	11.39	2128.00
// 200	10.58	10.43	2144.00		200	10.54	10.55	2144.00
// 200	10.74	10.31	2160.00		200	10.70	10.43	2160.00
// 200	10.91	10.31	2176.00		200	10.87	10.43	2176.00
// 200	11.07	11.00	2191.00		200	11.04	11.39	2191.00
// 200	11.23	10.19	2207.00		200	11.21	10.55	2207.00
// 200	11.40	10.19	2223.00		200	11.38	10.80	2223.00
// 200	11.56	11.00	2238.00		200	11.56	11.39	2238.00
// 200	11.72	10.19	2254.00		200	11.72	10.55	2254.00
// 200	11.89	10.43	2270.00		200	11.89	10.55	2270.00
// 200	12.06	11.26	2285.00		200	12.06	11.26	2285.00
// 200	12.22	10.86	2300.00		200	12.23	11.26	2300.00
// 200	12.39	9.59	2317.00		200	12.40	10.05	2317.00
// 200	12.54	10.60	2332.00		200	12.57	11.13	2332.00
// 200	12.71	10.19	2348.00		200	12.74	10.80	2348.00
// 200	12.87	11.00	2363.00		200	12.91	11.52	2363.00
// 200	13.04	10.43	2379.00		200	13.09	10.80	2379.00
// 200	13.21	10.43	2395.00		200	13.26	10.68	2395.00
// 200	13.37	11.13	2410.00		200	13.43	11.26	2410.00
// 200	13.54	10.31	2426.00		200	13.59	10.31	2426.00
// 200	13.71	10.43	2442.00		200	13.76	10.55	2442.00
// 200	13.87	11.00	2457.00		200	13.93	11.26	2457.00
// 200	14.04	10.31	2473.00		200	14.10	10.55	2473.00
// 200	14.20	10.31	2489.00		200	14.27	10.55	2489.00